// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: products/products.proto

package productspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Перечисление допустимых единиц измерения для товара
type UnitOfMeasurementENUM int32

const (
	UnitOfMeasurementENUM_PIECE        UnitOfMeasurementENUM = 0 // Штука
	UnitOfMeasurementENUM_PAIR         UnitOfMeasurementENUM = 1 // Пара
	UnitOfMeasurementENUM_LITER        UnitOfMeasurementENUM = 2 // Литр
	UnitOfMeasurementENUM_ROLL         UnitOfMeasurementENUM = 3 // Рулон
	UnitOfMeasurementENUM_SHEET        UnitOfMeasurementENUM = 4 // Лист
	UnitOfMeasurementENUM_CENTIMETRE   UnitOfMeasurementENUM = 5 // Сантиметр
	UnitOfMeasurementENUM_METRE        UnitOfMeasurementENUM = 6 // Метр
	UnitOfMeasurementENUM_KILOGRAM     UnitOfMeasurementENUM = 7 // Килограмм
	UnitOfMeasurementENUM_SQUARE_METER UnitOfMeasurementENUM = 8 // Квадратный метр
	UnitOfMeasurementENUM_CUBIC_METER  UnitOfMeasurementENUM = 9 // Кубический метр
)

// Enum value maps for UnitOfMeasurementENUM.
var (
	UnitOfMeasurementENUM_name = map[int32]string{
		0: "PIECE",
		1: "PAIR",
		2: "LITER",
		3: "ROLL",
		4: "SHEET",
		5: "CENTIMETRE",
		6: "METRE",
		7: "KILOGRAM",
		8: "SQUARE_METER",
		9: "CUBIC_METER",
	}
	UnitOfMeasurementENUM_value = map[string]int32{
		"PIECE":        0,
		"PAIR":         1,
		"LITER":        2,
		"ROLL":         3,
		"SHEET":        4,
		"CENTIMETRE":   5,
		"METRE":        6,
		"KILOGRAM":     7,
		"SQUARE_METER": 8,
		"CUBIC_METER":  9,
	}
)

func (x UnitOfMeasurementENUM) Enum() *UnitOfMeasurementENUM {
	p := new(UnitOfMeasurementENUM)
	*p = x
	return p
}

func (x UnitOfMeasurementENUM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfMeasurementENUM) Descriptor() protoreflect.EnumDescriptor {
	return file_products_products_proto_enumTypes[0].Descriptor()
}

func (UnitOfMeasurementENUM) Type() protoreflect.EnumType {
	return &file_products_products_proto_enumTypes[0]
}

func (x UnitOfMeasurementENUM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfMeasurementENUM.Descriptor instead.
func (UnitOfMeasurementENUM) EnumDescriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{0}
}

// Перечисление допустимого налога для товара
type VATENUM int32

const (
	VATENUM_NDS20 VATENUM = 0 // Налог 20%
	VATENUM_NDS10 VATENUM = 1 // Налог 10%
	VATENUM_NDS0  VATENUM = 2 // Налог 0%
)

// Enum value maps for VATENUM.
var (
	VATENUM_name = map[int32]string{
		0: "NDS20",
		1: "NDS10",
		2: "NDS0",
	}
	VATENUM_value = map[string]int32{
		"NDS20": 0,
		"NDS10": 1,
		"NDS0":  2,
	}
)

func (x VATENUM) Enum() *VATENUM {
	p := new(VATENUM)
	*p = x
	return p
}

func (x VATENUM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VATENUM) Descriptor() protoreflect.EnumDescriptor {
	return file_products_products_proto_enumTypes[1].Descriptor()
}

func (VATENUM) Type() protoreflect.EnumType {
	return &file_products_products_proto_enumTypes[1]
}

func (x VATENUM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VATENUM.Descriptor instead.
func (VATENUM) EnumDescriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{1}
}

// Перечисление возможных типов данных значений характеристики
type CharacteristicValuesTypeEnum int32

const (
	CharacteristicValuesTypeEnum_TEXT    CharacteristicValuesTypeEnum = 0
	CharacteristicValuesTypeEnum_NUMERIC CharacteristicValuesTypeEnum = 1
)

// Enum value maps for CharacteristicValuesTypeEnum.
var (
	CharacteristicValuesTypeEnum_name = map[int32]string{
		0: "TEXT",
		1: "NUMERIC",
	}
	CharacteristicValuesTypeEnum_value = map[string]int32{
		"TEXT":    0,
		"NUMERIC": 1,
	}
)

func (x CharacteristicValuesTypeEnum) Enum() *CharacteristicValuesTypeEnum {
	p := new(CharacteristicValuesTypeEnum)
	*p = x
	return p
}

func (x CharacteristicValuesTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacteristicValuesTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_products_products_proto_enumTypes[2].Descriptor()
}

func (CharacteristicValuesTypeEnum) Type() protoreflect.EnumType {
	return &file_products_products_proto_enumTypes[2]
}

func (x CharacteristicValuesTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacteristicValuesTypeEnum.Descriptor instead.
func (CharacteristicValuesTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{2}
}

type CreateProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CategoryId        string                `protobuf:"bytes,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Description       string                `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	UnitOfMeasurement UnitOfMeasurementENUM `protobuf:"varint,4,opt,name=unit_of_measurement,json=unitOfMeasurement,proto3,enum=productspb.UnitOfMeasurementENUM" json:"unit_of_measurement,omitempty"`
	Vat               VATENUM               `protobuf:"varint,5,opt,name=vat,proto3,enum=productspb.VATENUM" json:"vat,omitempty"`
	OldPrice          float64               `protobuf:"fixed64,6,opt,name=old_price,json=oldPrice,proto3" json:"old_price,omitempty"`
	DiscountRatio     float64               `protobuf:"fixed64,7,opt,name=discount_ratio,json=discountRatio,proto3" json:"discount_ratio,omitempty"`
	IsVisible         bool                  `protobuf:"varint,8,opt,name=is_visible,json=isVisible,proto3" json:"is_visible,omitempty"`
	// Nested
	Images          []*ProductImage          `protobuf:"bytes,31,rep,name=images,proto3" json:"images,omitempty"`
	Characteristics []*ProductCharacteristic `protobuf:"bytes,32,rep,name=characteristics,proto3" json:"characteristics,omitempty"`
}

func (x *CreateProductRequest) Reset() {
	*x = CreateProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProductRequest) ProtoMessage() {}

func (x *CreateProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProductRequest.ProtoReflect.Descriptor instead.
func (*CreateProductRequest) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{0}
}

func (x *CreateProductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProductRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *CreateProductRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateProductRequest) GetUnitOfMeasurement() UnitOfMeasurementENUM {
	if x != nil {
		return x.UnitOfMeasurement
	}
	return UnitOfMeasurementENUM_PIECE
}

func (x *CreateProductRequest) GetVat() VATENUM {
	if x != nil {
		return x.Vat
	}
	return VATENUM_NDS20
}

func (x *CreateProductRequest) GetOldPrice() float64 {
	if x != nil {
		return x.OldPrice
	}
	return 0
}

func (x *CreateProductRequest) GetDiscountRatio() float64 {
	if x != nil {
		return x.DiscountRatio
	}
	return 0
}

func (x *CreateProductRequest) GetIsVisible() bool {
	if x != nil {
		return x.IsVisible
	}
	return false
}

func (x *CreateProductRequest) GetImages() []*ProductImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CreateProductRequest) GetCharacteristics() []*ProductCharacteristic {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

type UpdateProductByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data *UpdateProductByIDRequest_Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateProductByIDRequest) Reset() {
	*x = UpdateProductByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductByIDRequest) ProtoMessage() {}

func (x *UpdateProductByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductByIDRequest.ProtoReflect.Descriptor instead.
func (*UpdateProductByIDRequest) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateProductByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateProductByIDRequest) GetData() *UpdateProductByIDRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProductCharacteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacteristicId string `protobuf:"bytes,1,opt,name=characteristic_id,json=characteristicId,proto3" json:"characteristic_id,omitempty"`
	// Types that are assignable to Value:
	//
	//	*ProductCharacteristic_TextValue
	//	*ProductCharacteristic_NumericValue
	Value isProductCharacteristic_Value `protobuf_oneof:"value"`
}

func (x *ProductCharacteristic) Reset() {
	*x = ProductCharacteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCharacteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCharacteristic) ProtoMessage() {}

func (x *ProductCharacteristic) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCharacteristic.ProtoReflect.Descriptor instead.
func (*ProductCharacteristic) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{2}
}

func (x *ProductCharacteristic) GetCharacteristicId() string {
	if x != nil {
		return x.CharacteristicId
	}
	return ""
}

func (m *ProductCharacteristic) GetValue() isProductCharacteristic_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ProductCharacteristic) GetTextValue() string {
	if x, ok := x.GetValue().(*ProductCharacteristic_TextValue); ok {
		return x.TextValue
	}
	return ""
}

func (x *ProductCharacteristic) GetNumericValue() float64 {
	if x, ok := x.GetValue().(*ProductCharacteristic_NumericValue); ok {
		return x.NumericValue
	}
	return 0
}

type isProductCharacteristic_Value interface {
	isProductCharacteristic_Value()
}

type ProductCharacteristic_TextValue struct {
	TextValue string `protobuf:"bytes,101,opt,name=text_value,json=textValue,proto3,oneof"`
}

type ProductCharacteristic_NumericValue struct {
	NumericValue float64 `protobuf:"fixed64,102,opt,name=numeric_value,json=numericValue,proto3,oneof"`
}

func (*ProductCharacteristic_TextValue) isProductCharacteristic_Value() {}

func (*ProductCharacteristic_NumericValue) isProductCharacteristic_Value() {}

type CreateProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Id of product
}

func (x *CreateProductResponse) Reset() {
	*x = CreateProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProductResponse) ProtoMessage() {}

func (x *CreateProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProductResponse.ProtoReflect.Descriptor instead.
func (*CreateProductResponse) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{3}
}

func (x *CreateProductResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetProductByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Required. Id of product
}

func (x *GetProductByIDRequest) Reset() {
	*x = GetProductByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductByIDRequest) ProtoMessage() {}

func (x *GetProductByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductByIDRequest.ProtoReflect.Descriptor instead.
func (*GetProductByIDRequest) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{4}
}

func (x *GetProductByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetProductByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Product `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProductByIDResponse) Reset() {
	*x = GetProductByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductByIDResponse) ProtoMessage() {}

func (x *GetProductByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductByIDResponse.ProtoReflect.Descriptor instead.
func (*GetProductByIDResponse) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{5}
}

func (x *GetProductByIDResponse) GetData() *Product {
	if x != nil {
		return x.Data
	}
	return nil
}

type FindProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Product `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FindProductsResponse) Reset() {
	*x = FindProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindProductsResponse) ProtoMessage() {}

func (x *FindProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindProductsResponse.ProtoReflect.Descriptor instead.
func (*FindProductsResponse) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{6}
}

func (x *FindProductsResponse) GetData() []*Product {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCharacteristicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                             // Required.
	ValuesType CharacteristicValuesTypeEnum `protobuf:"varint,2,opt,name=values_type,json=valuesType,proto3,enum=productspb.CharacteristicValuesTypeEnum" json:"values_type,omitempty"` // Required.
}

func (x *CreateCharacteristicRequest) Reset() {
	*x = CreateCharacteristicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCharacteristicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCharacteristicRequest) ProtoMessage() {}

func (x *CreateCharacteristicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCharacteristicRequest.ProtoReflect.Descriptor instead.
func (*CreateCharacteristicRequest) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCharacteristicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCharacteristicRequest) GetValuesType() CharacteristicValuesTypeEnum {
	if x != nil {
		return x.ValuesType
	}
	return CharacteristicValuesTypeEnum_TEXT
}

type CreateCharacteristicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateCharacteristicResponse) Reset() {
	*x = CreateCharacteristicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCharacteristicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCharacteristicResponse) ProtoMessage() {}

func (x *CreateCharacteristicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCharacteristicResponse.ProtoReflect.Descriptor instead.
func (*CreateCharacteristicResponse) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{8}
}

func (x *CreateCharacteristicResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FindCharacteristicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      uint32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`  // Required. Or Ids
	Search     string   `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"` // If passed - apply full text search
	Ids        []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`       // Required. Or limit. If passed - returns ids in this list. Length equals max limit value
	Offset     uint64   `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	CategoryId string   `protobuf:"bytes,5,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *FindCharacteristicsRequest) Reset() {
	*x = FindCharacteristicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCharacteristicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCharacteristicsRequest) ProtoMessage() {}

func (x *FindCharacteristicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCharacteristicsRequest.ProtoReflect.Descriptor instead.
func (*FindCharacteristicsRequest) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{9}
}

func (x *FindCharacteristicsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FindCharacteristicsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *FindCharacteristicsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FindCharacteristicsRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FindCharacteristicsRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type FindCharacteristicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Characteristic `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FindCharacteristicsResponse) Reset() {
	*x = FindCharacteristicsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCharacteristicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCharacteristicsResponse) ProtoMessage() {}

func (x *FindCharacteristicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCharacteristicsResponse.ProtoReflect.Descriptor instead.
func (*FindCharacteristicsResponse) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{10}
}

func (x *FindCharacteristicsResponse) GetData() []*Characteristic {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateCharacteristicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data *UpdateCharacteristicRequest_Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateCharacteristicRequest) Reset() {
	*x = UpdateCharacteristicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCharacteristicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCharacteristicRequest) ProtoMessage() {}

func (x *UpdateCharacteristicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCharacteristicRequest.ProtoReflect.Descriptor instead.
func (*UpdateCharacteristicRequest) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateCharacteristicRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCharacteristicRequest) GetData() *UpdateCharacteristicRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteCharacteristicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCharacteristicRequest) Reset() {
	*x = DeleteCharacteristicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCharacteristicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCharacteristicRequest) ProtoMessage() {}

func (x *DeleteCharacteristicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCharacteristicRequest.ProtoReflect.Descriptor instead.
func (*DeleteCharacteristicRequest) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteCharacteristicRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Изображение товара
type ProductImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl string `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Sort     uint32 `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ProductImage) Reset() {
	*x = ProductImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductImage) ProtoMessage() {}

func (x *ProductImage) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductImage.ProtoReflect.Descriptor instead.
func (*ProductImage) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{13}
}

func (x *ProductImage) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ProductImage) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

// Характеристика
type Characteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ValuesType CharacteristicValuesTypeEnum `protobuf:"varint,3,opt,name=values_type,json=valuesType,proto3,enum=productspb.CharacteristicValuesTypeEnum" json:"values_type,omitempty"`
}

func (x *Characteristic) Reset() {
	*x = Characteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Characteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Characteristic) ProtoMessage() {}

func (x *Characteristic) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Characteristic.ProtoReflect.Descriptor instead.
func (*Characteristic) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{14}
}

func (x *Characteristic) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Characteristic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Characteristic) GetValuesType() CharacteristicValuesTypeEnum {
	if x != nil {
		return x.ValuesType
	}
	return CharacteristicValuesTypeEnum_TEXT
}

type AddCharacteristicsToCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AddCharacteristicsToCategoriesRequest_CategoryCharacteristic `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AddCharacteristicsToCategoriesRequest) Reset() {
	*x = AddCharacteristicsToCategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCharacteristicsToCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCharacteristicsToCategoriesRequest) ProtoMessage() {}

func (x *AddCharacteristicsToCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCharacteristicsToCategoriesRequest.ProtoReflect.Descriptor instead.
func (*AddCharacteristicsToCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{15}
}

func (x *AddCharacteristicsToCategoriesRequest) GetData() []*AddCharacteristicsToCategoriesRequest_CategoryCharacteristic {
	if x != nil {
		return x.Data
	}
	return nil
}

type DropCharacteristicsFromCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DropCharacteristicsFromCategoriesRequest) Reset() {
	*x = DropCharacteristicsFromCategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropCharacteristicsFromCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropCharacteristicsFromCategoriesRequest) ProtoMessage() {}

func (x *DropCharacteristicsFromCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropCharacteristicsFromCategoriesRequest.ProtoReflect.Descriptor instead.
func (*DropCharacteristicsFromCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{16}
}

func (x *DropCharacteristicsFromCategoriesRequest) GetData() []*DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic {
	if x != nil {
		return x.Data
	}
	return nil
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From float64 `protobuf:"fixed64,1,opt,name=from,proto3" json:"from,omitempty"`
	To   float64 `protobuf:"fixed64,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{17}
}

func (x *Range) GetFrom() float64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *Range) GetTo() float64 {
	if x != nil {
		return x.To
	}
	return 0
}

// Фильтр по характеристикам товара
type CharacteristicsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextValues    []*CharacteristicsFilter_TextValue    `protobuf:"bytes,1,rep,name=text_values,json=textValues,proto3" json:"text_values,omitempty"`
	NumericValues []*CharacteristicsFilter_NumericValue `protobuf:"bytes,2,rep,name=numeric_values,json=numericValues,proto3" json:"numeric_values,omitempty"`
}

func (x *CharacteristicsFilter) Reset() {
	*x = CharacteristicsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacteristicsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacteristicsFilter) ProtoMessage() {}

func (x *CharacteristicsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacteristicsFilter.ProtoReflect.Descriptor instead.
func (*CharacteristicsFilter) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{18}
}

func (x *CharacteristicsFilter) GetTextValues() []*CharacteristicsFilter_TextValue {
	if x != nil {
		return x.TextValues
	}
	return nil
}

func (x *CharacteristicsFilter) GetNumericValues() []*CharacteristicsFilter_NumericValue {
	if x != nil {
		return x.NumericValues
	}
	return nil
}

// Фильтр для товаров
type ProductsFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit           uint32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          uint64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Search          string                  `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	Price           *Range                  `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	CategoryId      *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Characteristics *CharacteristicsFilter  `protobuf:"bytes,6,opt,name=characteristics,proto3" json:"characteristics,omitempty"`
	IsVisible       *wrapperspb.BoolValue   `protobuf:"bytes,7,opt,name=is_visible,json=isVisible,proto3" json:"is_visible,omitempty"`
}

func (x *ProductsFilterRequest) Reset() {
	*x = ProductsFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsFilterRequest) ProtoMessage() {}

func (x *ProductsFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsFilterRequest.ProtoReflect.Descriptor instead.
func (*ProductsFilterRequest) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{19}
}

func (x *ProductsFilterRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ProductsFilterRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ProductsFilterRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ProductsFilterRequest) GetPrice() *Range {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ProductsFilterRequest) GetCategoryId() *wrapperspb.StringValue {
	if x != nil {
		return x.CategoryId
	}
	return nil
}

func (x *ProductsFilterRequest) GetCharacteristics() *CharacteristicsFilter {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

func (x *ProductsFilterRequest) GetIsVisible() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsVisible
	}
	return nil
}

// Структура доступных фильтров для товаров (Должна имплементировать ProductsFilterRequest по характеристикам, цене)
type AvailableFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price           *Range                 `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Characteristics *CharacteristicsFilter `protobuf:"bytes,2,opt,name=characteristics,proto3" json:"characteristics,omitempty"`
}

func (x *AvailableFilters) Reset() {
	*x = AvailableFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableFilters) ProtoMessage() {}

func (x *AvailableFilters) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableFilters.ProtoReflect.Descriptor instead.
func (*AvailableFilters) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{20}
}

func (x *AvailableFilters) GetPrice() *Range {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *AvailableFilters) GetCharacteristics() *CharacteristicsFilter {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

// Репрезентация товара с всеми полями
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CategoryId             string                   `protobuf:"bytes,3,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Description            string                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	UnitOfMeasurement      UnitOfMeasurementENUM    `protobuf:"varint,5,opt,name=unit_of_measurement,json=unitOfMeasurement,proto3,enum=productspb.UnitOfMeasurementENUM" json:"unit_of_measurement,omitempty"`
	Vat                    VATENUM                  `protobuf:"varint,6,opt,name=vat,proto3,enum=productspb.VATENUM" json:"vat,omitempty"`
	OldPrice               float64                  `protobuf:"fixed64,7,opt,name=old_price,json=oldPrice,proto3" json:"old_price,omitempty"`
	DiscountRatio          float64                  `protobuf:"fixed64,8,opt,name=discount_ratio,json=discountRatio,proto3" json:"discount_ratio,omitempty"`
	Price                  float64                  `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
	IsVisible              bool                     `protobuf:"varint,10,opt,name=is_visible,json=isVisible,proto3" json:"is_visible,omitempty"`
	UpdatedAt              *timestamppb.Timestamp   `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Images                 []*ProductImage          `protobuf:"bytes,12,rep,name=images,proto3" json:"images,omitempty"`
	CreatedAt              *timestamppb.Timestamp   `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ProductCharacteristics []*ProductCharacteristic `protobuf:"bytes,14,rep,name=product_characteristics,json=productCharacteristics,proto3" json:"product_characteristics,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{21}
}

func (x *Product) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetUnitOfMeasurement() UnitOfMeasurementENUM {
	if x != nil {
		return x.UnitOfMeasurement
	}
	return UnitOfMeasurementENUM_PIECE
}

func (x *Product) GetVat() VATENUM {
	if x != nil {
		return x.Vat
	}
	return VATENUM_NDS20
}

func (x *Product) GetOldPrice() float64 {
	if x != nil {
		return x.OldPrice
	}
	return 0
}

func (x *Product) GetDiscountRatio() float64 {
	if x != nil {
		return x.DiscountRatio
	}
	return 0
}

func (x *Product) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetIsVisible() bool {
	if x != nil {
		return x.IsVisible
	}
	return false
}

func (x *Product) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Product) GetImages() []*ProductImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Product) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Product) GetProductCharacteristics() []*ProductCharacteristic {
	if x != nil {
		return x.ProductCharacteristics
	}
	return nil
}

type UpdateProductByIDRequest_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              *wrapperspb.StringValue                                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CategoryId        *wrapperspb.StringValue                                      `protobuf:"bytes,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Description       *wrapperspb.StringValue                                      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	UnitOfMeasurement *UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM `protobuf:"bytes,4,opt,name=unit_of_measurement,json=unitOfMeasurement,proto3" json:"unit_of_measurement,omitempty"`
	Vat               *UpdateProductByIDRequest_Data_OptionalVATENUM               `protobuf:"bytes,5,opt,name=vat,proto3" json:"vat,omitempty"`
	OldPrice          *wrapperspb.DoubleValue                                      `protobuf:"bytes,6,opt,name=old_price,json=oldPrice,proto3" json:"old_price,omitempty"`
	DiscountRatio     *wrapperspb.DoubleValue                                      `protobuf:"bytes,7,opt,name=discount_ratio,json=discountRatio,proto3" json:"discount_ratio,omitempty"`
	IsVisible         *wrapperspb.BoolValue                                        `protobuf:"bytes,8,opt,name=is_visible,json=isVisible,proto3" json:"is_visible,omitempty"`
	// Nested
	Images          *UpdateProductByIDRequest_Data_OptionalProductImages          `protobuf:"bytes,31,opt,name=images,proto3" json:"images,omitempty"`
	Characteristics *UpdateProductByIDRequest_Data_OptionalProductCharacteristics `protobuf:"bytes,32,opt,name=characteristics,proto3" json:"characteristics,omitempty"`
}

func (x *UpdateProductByIDRequest_Data) Reset() {
	*x = UpdateProductByIDRequest_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductByIDRequest_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductByIDRequest_Data) ProtoMessage() {}

func (x *UpdateProductByIDRequest_Data) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductByIDRequest_Data.ProtoReflect.Descriptor instead.
func (*UpdateProductByIDRequest_Data) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{1, 0}
}

func (x *UpdateProductByIDRequest_Data) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateProductByIDRequest_Data) GetCategoryId() *wrapperspb.StringValue {
	if x != nil {
		return x.CategoryId
	}
	return nil
}

func (x *UpdateProductByIDRequest_Data) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateProductByIDRequest_Data) GetUnitOfMeasurement() *UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM {
	if x != nil {
		return x.UnitOfMeasurement
	}
	return nil
}

func (x *UpdateProductByIDRequest_Data) GetVat() *UpdateProductByIDRequest_Data_OptionalVATENUM {
	if x != nil {
		return x.Vat
	}
	return nil
}

func (x *UpdateProductByIDRequest_Data) GetOldPrice() *wrapperspb.DoubleValue {
	if x != nil {
		return x.OldPrice
	}
	return nil
}

func (x *UpdateProductByIDRequest_Data) GetDiscountRatio() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DiscountRatio
	}
	return nil
}

func (x *UpdateProductByIDRequest_Data) GetIsVisible() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsVisible
	}
	return nil
}

func (x *UpdateProductByIDRequest_Data) GetImages() *UpdateProductByIDRequest_Data_OptionalProductImages {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *UpdateProductByIDRequest_Data) GetCharacteristics() *UpdateProductByIDRequest_Data_OptionalProductCharacteristics {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

type UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value UnitOfMeasurementENUM `protobuf:"varint,1,opt,name=value,proto3,enum=productspb.UnitOfMeasurementENUM" json:"value,omitempty"`
}

func (x *UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM) Reset() {
	*x = UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM) ProtoMessage() {}

func (x *UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM.ProtoReflect.Descriptor instead.
func (*UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM) GetValue() UnitOfMeasurementENUM {
	if x != nil {
		return x.Value
	}
	return UnitOfMeasurementENUM_PIECE
}

type UpdateProductByIDRequest_Data_OptionalVATENUM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value VATENUM `protobuf:"varint,1,opt,name=value,proto3,enum=productspb.VATENUM" json:"value,omitempty"`
}

func (x *UpdateProductByIDRequest_Data_OptionalVATENUM) Reset() {
	*x = UpdateProductByIDRequest_Data_OptionalVATENUM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductByIDRequest_Data_OptionalVATENUM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductByIDRequest_Data_OptionalVATENUM) ProtoMessage() {}

func (x *UpdateProductByIDRequest_Data_OptionalVATENUM) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductByIDRequest_Data_OptionalVATENUM.ProtoReflect.Descriptor instead.
func (*UpdateProductByIDRequest_Data_OptionalVATENUM) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *UpdateProductByIDRequest_Data_OptionalVATENUM) GetValue() VATENUM {
	if x != nil {
		return x.Value
	}
	return VATENUM_NDS20
}

type UpdateProductByIDRequest_Data_OptionalProductImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*ProductImage `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateProductByIDRequest_Data_OptionalProductImages) Reset() {
	*x = UpdateProductByIDRequest_Data_OptionalProductImages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductByIDRequest_Data_OptionalProductImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductByIDRequest_Data_OptionalProductImages) ProtoMessage() {}

func (x *UpdateProductByIDRequest_Data_OptionalProductImages) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductByIDRequest_Data_OptionalProductImages.ProtoReflect.Descriptor instead.
func (*UpdateProductByIDRequest_Data_OptionalProductImages) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{1, 0, 2}
}

func (x *UpdateProductByIDRequest_Data_OptionalProductImages) GetValue() []*ProductImage {
	if x != nil {
		return x.Value
	}
	return nil
}

type UpdateProductByIDRequest_Data_OptionalProductCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*ProductCharacteristic `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateProductByIDRequest_Data_OptionalProductCharacteristics) Reset() {
	*x = UpdateProductByIDRequest_Data_OptionalProductCharacteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductByIDRequest_Data_OptionalProductCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductByIDRequest_Data_OptionalProductCharacteristics) ProtoMessage() {}

func (x *UpdateProductByIDRequest_Data_OptionalProductCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductByIDRequest_Data_OptionalProductCharacteristics.ProtoReflect.Descriptor instead.
func (*UpdateProductByIDRequest_Data_OptionalProductCharacteristics) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{1, 0, 3}
}

func (x *UpdateProductByIDRequest_Data_OptionalProductCharacteristics) GetValue() []*ProductCharacteristic {
	if x != nil {
		return x.Value
	}
	return nil
}

type UpdateCharacteristicRequest_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateCharacteristicRequest_Data) Reset() {
	*x = UpdateCharacteristicRequest_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCharacteristicRequest_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCharacteristicRequest_Data) ProtoMessage() {}

func (x *UpdateCharacteristicRequest_Data) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCharacteristicRequest_Data.ProtoReflect.Descriptor instead.
func (*UpdateCharacteristicRequest_Data) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{11, 0}
}

func (x *UpdateCharacteristicRequest_Data) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type AddCharacteristicsToCategoriesRequest_CategoryCharacteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId       string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	CharacteristicId string `protobuf:"bytes,2,opt,name=characteristic_id,json=characteristicId,proto3" json:"characteristic_id,omitempty"`
}

func (x *AddCharacteristicsToCategoriesRequest_CategoryCharacteristic) Reset() {
	*x = AddCharacteristicsToCategoriesRequest_CategoryCharacteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCharacteristicsToCategoriesRequest_CategoryCharacteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCharacteristicsToCategoriesRequest_CategoryCharacteristic) ProtoMessage() {}

func (x *AddCharacteristicsToCategoriesRequest_CategoryCharacteristic) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCharacteristicsToCategoriesRequest_CategoryCharacteristic.ProtoReflect.Descriptor instead.
func (*AddCharacteristicsToCategoriesRequest_CategoryCharacteristic) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{15, 0}
}

func (x *AddCharacteristicsToCategoriesRequest_CategoryCharacteristic) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *AddCharacteristicsToCategoriesRequest_CategoryCharacteristic) GetCharacteristicId() string {
	if x != nil {
		return x.CharacteristicId
	}
	return ""
}

type DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId       string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	CharacteristicId string `protobuf:"bytes,2,opt,name=characteristic_id,json=characteristicId,proto3" json:"characteristic_id,omitempty"`
}

func (x *DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic) Reset() {
	*x = DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic) ProtoMessage() {}

func (x *DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic.ProtoReflect.Descriptor instead.
func (*DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{16, 0}
}

func (x *DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic) GetCharacteristicId() string {
	if x != nil {
		return x.CharacteristicId
	}
	return ""
}

type CharacteristicsFilter_TextValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *CharacteristicsFilter_TextValue) Reset() {
	*x = CharacteristicsFilter_TextValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacteristicsFilter_TextValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacteristicsFilter_TextValue) ProtoMessage() {}

func (x *CharacteristicsFilter_TextValue) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacteristicsFilter_TextValue.ProtoReflect.Descriptor instead.
func (*CharacteristicsFilter_TextValue) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CharacteristicsFilter_TextValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CharacteristicsFilter_TextValue) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type CharacteristicsFilter_NumericValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Values *Range `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *CharacteristicsFilter_NumericValue) Reset() {
	*x = CharacteristicsFilter_NumericValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_products_products_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacteristicsFilter_NumericValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacteristicsFilter_NumericValue) ProtoMessage() {}

func (x *CharacteristicsFilter_NumericValue) ProtoReflect() protoreflect.Message {
	mi := &file_products_products_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacteristicsFilter_NumericValue.ProtoReflect.Descriptor instead.
func (*CharacteristicsFilter_NumericValue) Descriptor() ([]byte, []int) {
	return file_products_products_proto_rawDescGZIP(), []int{18, 1}
}

func (x *CharacteristicsFilter_NumericValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CharacteristicsFilter_NumericValue) GetValues() *Range {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_products_products_proto protoreflect.FileDescriptor

var file_products_products_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x70, 0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x4e, 0x55, 0x4d, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x76, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62,
	0x2e, 0x56, 0x41, 0x54, 0x45, 0x4e, 0x55, 0x4d, 0x52, 0x03, 0x76, 0x61, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22,
	0xad, 0x09, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xc1, 0x08, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x4e, 0x55, 0x4d, 0x52, 0x11, 0x75, 0x6e, 0x69,
	0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b,
	0x0a, 0x03, 0x76, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56,
	0x41, 0x54, 0x45, 0x4e, 0x55, 0x4d, 0x52, 0x03, 0x76, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x6c,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x72, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x1a, 0x58, 0x0a, 0x1d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55,
	0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x4e, 0x55, 0x4d, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x4e, 0x55, 0x4d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3c, 0x0a,
	0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x41, 0x54, 0x45, 0x4e, 0x55, 0x4d,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x56, 0x41, 0x54,
	0x45, 0x4e, 0x55, 0x4d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x47, 0x0a, 0x15, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x59, 0x0a, 0x1e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x95, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65,
	0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x14,
	0x46, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x49, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2e, 0x0a, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x1a,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xa9, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x38, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x7f,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xed, 0x01, 0x0a, 0x25, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x66, 0x0a, 0x16, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x64, 0x22,
	0xf3, 0x01, 0x0a, 0x28, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x66, 0x0a,
	0x16, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x74, 0x6f, 0x22, 0xbc, 0x02, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0b,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x33, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x49, 0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xcd, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x4b, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xe7, 0x04, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x4e, 0x55, 0x4d, 0x52,
	0x11, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x76, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x56, 0x41, 0x54,
	0x45, 0x4e, 0x55, 0x4d, 0x52, 0x03, 0x76, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x6c,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x5a, 0x0a, 0x17, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x16,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2a, 0x98, 0x01, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x74, 0x4f,
	0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x4e, 0x55, 0x4d,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x49, 0x45, 0x43, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x41, 0x49, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48,
	0x45, 0x45, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4d, 0x45,
	0x54, 0x52, 0x45, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x54, 0x52, 0x45, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x49, 0x4c, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x08,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x55, 0x42, 0x49, 0x43, 0x5f, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10,
	0x09, 0x2a, 0x29, 0x0a, 0x07, 0x56, 0x41, 0x54, 0x45, 0x4e, 0x55, 0x4d, 0x12, 0x09, 0x0a, 0x05,
	0x4e, 0x44, 0x53, 0x32, 0x30, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x44, 0x53, 0x31, 0x30,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x44, 0x53, 0x30, 0x10, 0x02, 0x2a, 0x35, 0x0a, 0x1c,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49,
	0x43, 0x10, 0x01, 0x32, 0x97, 0x08, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x54, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6b, 0x0a, 0x1e,
	0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x6f,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x71, 0x0a, 0x21, 0x44, 0x72, 0x6f,
	0x70, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x72, 0x6f, 0x70,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0c,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x3d, 0x5a,
	0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x6f, 0x2d, 0x6d, 0x70, 0x6f, 0x2d, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x3b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_products_products_proto_rawDescOnce sync.Once
	file_products_products_proto_rawDescData = file_products_products_proto_rawDesc
)

func file_products_products_proto_rawDescGZIP() []byte {
	file_products_products_proto_rawDescOnce.Do(func() {
		file_products_products_proto_rawDescData = protoimpl.X.CompressGZIP(file_products_products_proto_rawDescData)
	})
	return file_products_products_proto_rawDescData
}

var file_products_products_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_products_products_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_products_products_proto_goTypes = []interface{}{
	(UnitOfMeasurementENUM)(0),                                              // 0: productspb.UnitOfMeasurementENUM
	(VATENUM)(0),                                                            // 1: productspb.VATENUM
	(CharacteristicValuesTypeEnum)(0),                                       // 2: productspb.CharacteristicValuesTypeEnum
	(*CreateProductRequest)(nil),                                            // 3: productspb.CreateProductRequest
	(*UpdateProductByIDRequest)(nil),                                        // 4: productspb.UpdateProductByIDRequest
	(*ProductCharacteristic)(nil),                                           // 5: productspb.ProductCharacteristic
	(*CreateProductResponse)(nil),                                           // 6: productspb.CreateProductResponse
	(*GetProductByIDRequest)(nil),                                           // 7: productspb.GetProductByIDRequest
	(*GetProductByIDResponse)(nil),                                          // 8: productspb.GetProductByIDResponse
	(*FindProductsResponse)(nil),                                            // 9: productspb.FindProductsResponse
	(*CreateCharacteristicRequest)(nil),                                     // 10: productspb.CreateCharacteristicRequest
	(*CreateCharacteristicResponse)(nil),                                    // 11: productspb.CreateCharacteristicResponse
	(*FindCharacteristicsRequest)(nil),                                      // 12: productspb.FindCharacteristicsRequest
	(*FindCharacteristicsResponse)(nil),                                     // 13: productspb.FindCharacteristicsResponse
	(*UpdateCharacteristicRequest)(nil),                                     // 14: productspb.UpdateCharacteristicRequest
	(*DeleteCharacteristicRequest)(nil),                                     // 15: productspb.DeleteCharacteristicRequest
	(*ProductImage)(nil),                                                    // 16: productspb.ProductImage
	(*Characteristic)(nil),                                                  // 17: productspb.Characteristic
	(*AddCharacteristicsToCategoriesRequest)(nil),                           // 18: productspb.AddCharacteristicsToCategoriesRequest
	(*DropCharacteristicsFromCategoriesRequest)(nil),                        // 19: productspb.DropCharacteristicsFromCategoriesRequest
	(*Range)(nil),                                                           // 20: productspb.Range
	(*CharacteristicsFilter)(nil),                                           // 21: productspb.CharacteristicsFilter
	(*ProductsFilterRequest)(nil),                                           // 22: productspb.ProductsFilterRequest
	(*AvailableFilters)(nil),                                                // 23: productspb.AvailableFilters
	(*Product)(nil),                                                         // 24: productspb.Product
	(*UpdateProductByIDRequest_Data)(nil),                                   // 25: productspb.UpdateProductByIDRequest.Data
	(*UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM)(nil),     // 26: productspb.UpdateProductByIDRequest.Data.OptionalUnitOfMeasurementENUM
	(*UpdateProductByIDRequest_Data_OptionalVATENUM)(nil),                   // 27: productspb.UpdateProductByIDRequest.Data.OptionalVATENUM
	(*UpdateProductByIDRequest_Data_OptionalProductImages)(nil),             // 28: productspb.UpdateProductByIDRequest.Data.OptionalProductImages
	(*UpdateProductByIDRequest_Data_OptionalProductCharacteristics)(nil),    // 29: productspb.UpdateProductByIDRequest.Data.OptionalProductCharacteristics
	(*UpdateCharacteristicRequest_Data)(nil),                                // 30: productspb.UpdateCharacteristicRequest.Data
	(*AddCharacteristicsToCategoriesRequest_CategoryCharacteristic)(nil),    // 31: productspb.AddCharacteristicsToCategoriesRequest.CategoryCharacteristic
	(*DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic)(nil), // 32: productspb.DropCharacteristicsFromCategoriesRequest.CategoryCharacteristic
	(*CharacteristicsFilter_TextValue)(nil),                                 // 33: productspb.CharacteristicsFilter.TextValue
	(*CharacteristicsFilter_NumericValue)(nil),                              // 34: productspb.CharacteristicsFilter.NumericValue
	(*wrapperspb.StringValue)(nil),                                          // 35: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),                                            // 36: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),                                           // 37: google.protobuf.Timestamp
	(*wrapperspb.DoubleValue)(nil),                                          // 38: google.protobuf.DoubleValue
	(*emptypb.Empty)(nil),                                                   // 39: google.protobuf.Empty
}
var file_products_products_proto_depIdxs = []int32{
	0,  // 0: productspb.CreateProductRequest.unit_of_measurement:type_name -> productspb.UnitOfMeasurementENUM
	1,  // 1: productspb.CreateProductRequest.vat:type_name -> productspb.VATENUM
	16, // 2: productspb.CreateProductRequest.images:type_name -> productspb.ProductImage
	5,  // 3: productspb.CreateProductRequest.characteristics:type_name -> productspb.ProductCharacteristic
	25, // 4: productspb.UpdateProductByIDRequest.data:type_name -> productspb.UpdateProductByIDRequest.Data
	24, // 5: productspb.GetProductByIDResponse.data:type_name -> productspb.Product
	24, // 6: productspb.FindProductsResponse.data:type_name -> productspb.Product
	2,  // 7: productspb.CreateCharacteristicRequest.values_type:type_name -> productspb.CharacteristicValuesTypeEnum
	17, // 8: productspb.FindCharacteristicsResponse.data:type_name -> productspb.Characteristic
	30, // 9: productspb.UpdateCharacteristicRequest.data:type_name -> productspb.UpdateCharacteristicRequest.Data
	2,  // 10: productspb.Characteristic.values_type:type_name -> productspb.CharacteristicValuesTypeEnum
	31, // 11: productspb.AddCharacteristicsToCategoriesRequest.data:type_name -> productspb.AddCharacteristicsToCategoriesRequest.CategoryCharacteristic
	32, // 12: productspb.DropCharacteristicsFromCategoriesRequest.data:type_name -> productspb.DropCharacteristicsFromCategoriesRequest.CategoryCharacteristic
	33, // 13: productspb.CharacteristicsFilter.text_values:type_name -> productspb.CharacteristicsFilter.TextValue
	34, // 14: productspb.CharacteristicsFilter.numeric_values:type_name -> productspb.CharacteristicsFilter.NumericValue
	20, // 15: productspb.ProductsFilterRequest.price:type_name -> productspb.Range
	35, // 16: productspb.ProductsFilterRequest.category_id:type_name -> google.protobuf.StringValue
	21, // 17: productspb.ProductsFilterRequest.characteristics:type_name -> productspb.CharacteristicsFilter
	36, // 18: productspb.ProductsFilterRequest.is_visible:type_name -> google.protobuf.BoolValue
	20, // 19: productspb.AvailableFilters.price:type_name -> productspb.Range
	21, // 20: productspb.AvailableFilters.characteristics:type_name -> productspb.CharacteristicsFilter
	0,  // 21: productspb.Product.unit_of_measurement:type_name -> productspb.UnitOfMeasurementENUM
	1,  // 22: productspb.Product.vat:type_name -> productspb.VATENUM
	37, // 23: productspb.Product.updated_at:type_name -> google.protobuf.Timestamp
	16, // 24: productspb.Product.images:type_name -> productspb.ProductImage
	37, // 25: productspb.Product.created_at:type_name -> google.protobuf.Timestamp
	5,  // 26: productspb.Product.product_characteristics:type_name -> productspb.ProductCharacteristic
	35, // 27: productspb.UpdateProductByIDRequest.Data.name:type_name -> google.protobuf.StringValue
	35, // 28: productspb.UpdateProductByIDRequest.Data.category_id:type_name -> google.protobuf.StringValue
	35, // 29: productspb.UpdateProductByIDRequest.Data.description:type_name -> google.protobuf.StringValue
	26, // 30: productspb.UpdateProductByIDRequest.Data.unit_of_measurement:type_name -> productspb.UpdateProductByIDRequest.Data.OptionalUnitOfMeasurementENUM
	27, // 31: productspb.UpdateProductByIDRequest.Data.vat:type_name -> productspb.UpdateProductByIDRequest.Data.OptionalVATENUM
	38, // 32: productspb.UpdateProductByIDRequest.Data.old_price:type_name -> google.protobuf.DoubleValue
	38, // 33: productspb.UpdateProductByIDRequest.Data.discount_ratio:type_name -> google.protobuf.DoubleValue
	36, // 34: productspb.UpdateProductByIDRequest.Data.is_visible:type_name -> google.protobuf.BoolValue
	28, // 35: productspb.UpdateProductByIDRequest.Data.images:type_name -> productspb.UpdateProductByIDRequest.Data.OptionalProductImages
	29, // 36: productspb.UpdateProductByIDRequest.Data.characteristics:type_name -> productspb.UpdateProductByIDRequest.Data.OptionalProductCharacteristics
	0,  // 37: productspb.UpdateProductByIDRequest.Data.OptionalUnitOfMeasurementENUM.value:type_name -> productspb.UnitOfMeasurementENUM
	1,  // 38: productspb.UpdateProductByIDRequest.Data.OptionalVATENUM.value:type_name -> productspb.VATENUM
	16, // 39: productspb.UpdateProductByIDRequest.Data.OptionalProductImages.value:type_name -> productspb.ProductImage
	5,  // 40: productspb.UpdateProductByIDRequest.Data.OptionalProductCharacteristics.value:type_name -> productspb.ProductCharacteristic
	35, // 41: productspb.UpdateCharacteristicRequest.Data.name:type_name -> google.protobuf.StringValue
	20, // 42: productspb.CharacteristicsFilter.NumericValue.values:type_name -> productspb.Range
	3,  // 43: productspb.Products.CreateProduct:input_type -> productspb.CreateProductRequest
	7,  // 44: productspb.Products.GetProductByID:input_type -> productspb.GetProductByIDRequest
	22, // 45: productspb.Products.FindProducts:input_type -> productspb.ProductsFilterRequest
	4,  // 46: productspb.Products.UpdateProductByID:input_type -> productspb.UpdateProductByIDRequest
	10, // 47: productspb.Products.CreateCharacteristic:input_type -> productspb.CreateCharacteristicRequest
	12, // 48: productspb.Products.FindCharacteristics:input_type -> productspb.FindCharacteristicsRequest
	14, // 49: productspb.Products.UpdateCharacteristic:input_type -> productspb.UpdateCharacteristicRequest
	15, // 50: productspb.Products.DeleteCharacteristic:input_type -> productspb.DeleteCharacteristicRequest
	18, // 51: productspb.Products.AddCharacteristicsToCategories:input_type -> productspb.AddCharacteristicsToCategoriesRequest
	19, // 52: productspb.Products.DropCharacteristicsFromCategories:input_type -> productspb.DropCharacteristicsFromCategoriesRequest
	22, // 53: productspb.Products.ApplyFilters:input_type -> productspb.ProductsFilterRequest
	6,  // 54: productspb.Products.CreateProduct:output_type -> productspb.CreateProductResponse
	8,  // 55: productspb.Products.GetProductByID:output_type -> productspb.GetProductByIDResponse
	9,  // 56: productspb.Products.FindProducts:output_type -> productspb.FindProductsResponse
	39, // 57: productspb.Products.UpdateProductByID:output_type -> google.protobuf.Empty
	11, // 58: productspb.Products.CreateCharacteristic:output_type -> productspb.CreateCharacteristicResponse
	13, // 59: productspb.Products.FindCharacteristics:output_type -> productspb.FindCharacteristicsResponse
	39, // 60: productspb.Products.UpdateCharacteristic:output_type -> google.protobuf.Empty
	39, // 61: productspb.Products.DeleteCharacteristic:output_type -> google.protobuf.Empty
	39, // 62: productspb.Products.AddCharacteristicsToCategories:output_type -> google.protobuf.Empty
	39, // 63: productspb.Products.DropCharacteristicsFromCategories:output_type -> google.protobuf.Empty
	23, // 64: productspb.Products.ApplyFilters:output_type -> productspb.AvailableFilters
	54, // [54:65] is the sub-list for method output_type
	43, // [43:54] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_products_products_proto_init() }
func file_products_products_proto_init() {
	if File_products_products_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_products_products_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCharacteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCharacteristicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCharacteristicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCharacteristicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCharacteristicsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCharacteristicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCharacteristicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Characteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCharacteristicsToCategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropCharacteristicsFromCategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacteristicsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductByIDRequest_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductByIDRequest_Data_OptionalUnitOfMeasurementENUM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductByIDRequest_Data_OptionalVATENUM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductByIDRequest_Data_OptionalProductImages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductByIDRequest_Data_OptionalProductCharacteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCharacteristicRequest_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCharacteristicsToCategoriesRequest_CategoryCharacteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropCharacteristicsFromCategoriesRequest_CategoryCharacteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacteristicsFilter_TextValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_products_products_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacteristicsFilter_NumericValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_products_products_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ProductCharacteristic_TextValue)(nil),
		(*ProductCharacteristic_NumericValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_products_products_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_products_products_proto_goTypes,
		DependencyIndexes: file_products_products_proto_depIdxs,
		EnumInfos:         file_products_products_proto_enumTypes,
		MessageInfos:      file_products_products_proto_msgTypes,
	}.Build()
	File_products_products_proto = out.File
	file_products_products_proto_rawDesc = nil
	file_products_products_proto_goTypes = nil
	file_products_products_proto_depIdxs = nil
}
