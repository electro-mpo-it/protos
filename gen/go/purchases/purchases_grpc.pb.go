// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: purchases/purchases.proto

package purchasespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Purchases_CreateSupplier_FullMethodName       = "/purchasespb.Purchases/CreateSupplier"
	Purchases_GetSupplier_FullMethodName          = "/purchasespb.Purchases/GetSupplier"
	Purchases_FindSuppliers_FullMethodName        = "/purchasespb.Purchases/FindSuppliers"
	Purchases_UpdateSupplier_FullMethodName       = "/purchasespb.Purchases/UpdateSupplier"
	Purchases_CreatePurchasingInfo_FullMethodName = "/purchasespb.Purchases/CreatePurchasingInfo"
	Purchases_GetPurchasingInfo_FullMethodName    = "/purchasespb.Purchases/GetPurchasingInfo"
	Purchases_UpdatePurchasingInfo_FullMethodName = "/purchasespb.Purchases/UpdatePurchasingInfo"
)

// PurchasesClient is the client API for Purchases service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurchasesClient interface {
	CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error)
	GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierResponse, error)
	FindSuppliers(ctx context.Context, in *FindSuppliersRequest, opts ...grpc.CallOption) (*FindSuppliersResponse, error)
	UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreatePurchasingInfo(ctx context.Context, in *CreatePurchasingInfoRequest, opts ...grpc.CallOption) (*CreatePurchasingInfoResponse, error)
	GetPurchasingInfo(ctx context.Context, in *GetPurchasingInfoRequest, opts ...grpc.CallOption) (*GetPurchasingInfoResponse, error)
	UpdatePurchasingInfo(ctx context.Context, in *UpdatePurchasingInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type purchasesClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchasesClient(cc grpc.ClientConnInterface) PurchasesClient {
	return &purchasesClient{cc}
}

func (c *purchasesClient) CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error) {
	out := new(CreateSupplierResponse)
	err := c.cc.Invoke(ctx, Purchases_CreateSupplier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesClient) GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierResponse, error) {
	out := new(GetSupplierResponse)
	err := c.cc.Invoke(ctx, Purchases_GetSupplier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesClient) FindSuppliers(ctx context.Context, in *FindSuppliersRequest, opts ...grpc.CallOption) (*FindSuppliersResponse, error) {
	out := new(FindSuppliersResponse)
	err := c.cc.Invoke(ctx, Purchases_FindSuppliers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesClient) UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Purchases_UpdateSupplier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesClient) CreatePurchasingInfo(ctx context.Context, in *CreatePurchasingInfoRequest, opts ...grpc.CallOption) (*CreatePurchasingInfoResponse, error) {
	out := new(CreatePurchasingInfoResponse)
	err := c.cc.Invoke(ctx, Purchases_CreatePurchasingInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesClient) GetPurchasingInfo(ctx context.Context, in *GetPurchasingInfoRequest, opts ...grpc.CallOption) (*GetPurchasingInfoResponse, error) {
	out := new(GetPurchasingInfoResponse)
	err := c.cc.Invoke(ctx, Purchases_GetPurchasingInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesClient) UpdatePurchasingInfo(ctx context.Context, in *UpdatePurchasingInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Purchases_UpdatePurchasingInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchasesServer is the server API for Purchases service.
// All implementations must embed UnimplementedPurchasesServer
// for forward compatibility
type PurchasesServer interface {
	CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error)
	GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierResponse, error)
	FindSuppliers(context.Context, *FindSuppliersRequest) (*FindSuppliersResponse, error)
	UpdateSupplier(context.Context, *UpdateSupplierRequest) (*emptypb.Empty, error)
	CreatePurchasingInfo(context.Context, *CreatePurchasingInfoRequest) (*CreatePurchasingInfoResponse, error)
	GetPurchasingInfo(context.Context, *GetPurchasingInfoRequest) (*GetPurchasingInfoResponse, error)
	UpdatePurchasingInfo(context.Context, *UpdatePurchasingInfoRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPurchasesServer()
}

// UnimplementedPurchasesServer must be embedded to have forward compatible implementations.
type UnimplementedPurchasesServer struct {
}

func (UnimplementedPurchasesServer) CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplier not implemented")
}
func (UnimplementedPurchasesServer) GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplier not implemented")
}
func (UnimplementedPurchasesServer) FindSuppliers(context.Context, *FindSuppliersRequest) (*FindSuppliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuppliers not implemented")
}
func (UnimplementedPurchasesServer) UpdateSupplier(context.Context, *UpdateSupplierRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplier not implemented")
}
func (UnimplementedPurchasesServer) CreatePurchasingInfo(context.Context, *CreatePurchasingInfoRequest) (*CreatePurchasingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchasingInfo not implemented")
}
func (UnimplementedPurchasesServer) GetPurchasingInfo(context.Context, *GetPurchasingInfoRequest) (*GetPurchasingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasingInfo not implemented")
}
func (UnimplementedPurchasesServer) UpdatePurchasingInfo(context.Context, *UpdatePurchasingInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePurchasingInfo not implemented")
}
func (UnimplementedPurchasesServer) mustEmbedUnimplementedPurchasesServer() {}

// UnsafePurchasesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchasesServer will
// result in compilation errors.
type UnsafePurchasesServer interface {
	mustEmbedUnimplementedPurchasesServer()
}

func RegisterPurchasesServer(s grpc.ServiceRegistrar, srv PurchasesServer) {
	s.RegisterService(&Purchases_ServiceDesc, srv)
}

func _Purchases_CreateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasesServer).CreateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchases_CreateSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasesServer).CreateSupplier(ctx, req.(*CreateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchases_GetSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasesServer).GetSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchases_GetSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasesServer).GetSupplier(ctx, req.(*GetSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchases_FindSuppliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSuppliersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasesServer).FindSuppliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchases_FindSuppliers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasesServer).FindSuppliers(ctx, req.(*FindSuppliersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchases_UpdateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasesServer).UpdateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchases_UpdateSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasesServer).UpdateSupplier(ctx, req.(*UpdateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchases_CreatePurchasingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurchasingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasesServer).CreatePurchasingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchases_CreatePurchasingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasesServer).CreatePurchasingInfo(ctx, req.(*CreatePurchasingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchases_GetPurchasingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchasingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasesServer).GetPurchasingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchases_GetPurchasingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasesServer).GetPurchasingInfo(ctx, req.(*GetPurchasingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchases_UpdatePurchasingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePurchasingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasesServer).UpdatePurchasingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchases_UpdatePurchasingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasesServer).UpdatePurchasingInfo(ctx, req.(*UpdatePurchasingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Purchases_ServiceDesc is the grpc.ServiceDesc for Purchases service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Purchases_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "purchasespb.Purchases",
	HandlerType: (*PurchasesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSupplier",
			Handler:    _Purchases_CreateSupplier_Handler,
		},
		{
			MethodName: "GetSupplier",
			Handler:    _Purchases_GetSupplier_Handler,
		},
		{
			MethodName: "FindSuppliers",
			Handler:    _Purchases_FindSuppliers_Handler,
		},
		{
			MethodName: "UpdateSupplier",
			Handler:    _Purchases_UpdateSupplier_Handler,
		},
		{
			MethodName: "CreatePurchasingInfo",
			Handler:    _Purchases_CreatePurchasingInfo_Handler,
		},
		{
			MethodName: "GetPurchasingInfo",
			Handler:    _Purchases_GetPurchasingInfo_Handler,
		},
		{
			MethodName: "UpdatePurchasingInfo",
			Handler:    _Purchases_UpdatePurchasingInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "purchases/purchases.proto",
}
