// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: catalog/categories.proto

package catalogpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategoriesClient is the client API for Categories service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoriesClient interface {
	Create(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	GetById(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
	Find(ctx context.Context, in *FindCategoriesRequest, opts ...grpc.CallOption) (*FindCategoriesResponse, error)
	Update(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetActivity(ctx context.Context, in *SetCategoryActivityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type categoriesClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoriesClient(cc grpc.ClientConnInterface) CategoriesClient {
	return &categoriesClient{cc}
}

func (c *categoriesClient) Create(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, "/catalogpb.Categories/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesClient) GetById(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	out := new(GetCategoryResponse)
	err := c.cc.Invoke(ctx, "/catalogpb.Categories/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesClient) Find(ctx context.Context, in *FindCategoriesRequest, opts ...grpc.CallOption) (*FindCategoriesResponse, error) {
	out := new(FindCategoriesResponse)
	err := c.cc.Invoke(ctx, "/catalogpb.Categories/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesClient) Update(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalogpb.Categories/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesClient) SetActivity(ctx context.Context, in *SetCategoryActivityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalogpb.Categories/SetActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesClient) Delete(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalogpb.Categories/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoriesServer is the server API for Categories service.
// All implementations must embed UnimplementedCategoriesServer
// for forward compatibility
type CategoriesServer interface {
	Create(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	GetById(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error)
	Find(context.Context, *FindCategoriesRequest) (*FindCategoriesResponse, error)
	Update(context.Context, *UpdateCategoryRequest) (*emptypb.Empty, error)
	SetActivity(context.Context, *SetCategoryActivityRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteCategoryRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCategoriesServer()
}

// UnimplementedCategoriesServer must be embedded to have forward compatible implementations.
type UnimplementedCategoriesServer struct {
}

func (UnimplementedCategoriesServer) Create(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCategoriesServer) GetById(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCategoriesServer) Find(context.Context, *FindCategoriesRequest) (*FindCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedCategoriesServer) Update(context.Context, *UpdateCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCategoriesServer) SetActivity(context.Context, *SetCategoryActivityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActivity not implemented")
}
func (UnimplementedCategoriesServer) Delete(context.Context, *DeleteCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCategoriesServer) mustEmbedUnimplementedCategoriesServer() {}

// UnsafeCategoriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoriesServer will
// result in compilation errors.
type UnsafeCategoriesServer interface {
	mustEmbedUnimplementedCategoriesServer()
}

func RegisterCategoriesServer(s grpc.ServiceRegistrar, srv CategoriesServer) {
	s.RegisterService(&Categories_ServiceDesc, srv)
}

func _Categories_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalogpb.Categories/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServer).Create(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categories_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalogpb.Categories/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServer).GetById(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categories_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalogpb.Categories/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServer).Find(ctx, req.(*FindCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categories_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalogpb.Categories/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServer).Update(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categories_SetActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCategoryActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServer).SetActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalogpb.Categories/SetActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServer).SetActivity(ctx, req.(*SetCategoryActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categories_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalogpb.Categories/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServer).Delete(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Categories_ServiceDesc is the grpc.ServiceDesc for Categories service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Categories_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalogpb.Categories",
	HandlerType: (*CategoriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Categories_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _Categories_GetById_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Categories_Find_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Categories_Update_Handler,
		},
		{
			MethodName: "SetActivity",
			Handler:    _Categories_SetActivity_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Categories_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog/categories.proto",
}
