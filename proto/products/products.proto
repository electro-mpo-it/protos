syntax = "proto3";

package productspb;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/electro-mpo-it/protos/gen/go/products;productspb";

// Сервис товаров
service Products {
    rpc Create (CreateRequest) returns (CreateResponse); // Создание товара
    rpc GetByID (GetByIDRequest) returns (GetByIDResponse); // Получение товара по его ID
    rpc Find (ProductsFilter) returns (FindResponse); // Поиск по товарам
    rpc Update (UpdateRequest) returns (google.protobuf.Empty); // Обновление данных о товаре
    rpc SetVisible (SetVisibleRequest) returns (google.protobuf.Empty); // Установить значение флага видимости для товара

    rpc UpdateImages (UpdateImagesRequest) returns (google.protobuf.Empty); // Обновить изображения товара (Аналог PUT в REST)

    rpc CreateCharacteristic (CreateCharacteristicRequest) returns (CreateCharacteristicResponse); // Создать характеристику
    rpc FindCharacteristics (FindCharacteristicsRequest) returns (FindCharacteristicsResponse); // Поиск по характеристикам
    rpc UpdateCharacteristic (UpdateCharacteristicRequest) returns (google.protobuf.Empty); // Обновить данные о характеристике (Кроме типа данных!)
    rpc DeleteCharacteristic (DeleteCharacteristicRequest) returns (google.protobuf.Empty); // Удалить характеристику

    // FIX: Изменены названия методов; GetProductCharacteristicsResponse без джоина характеристик;
    rpc AddProductCharacteristic (AddProductCharacteristicRequest) returns (google.protobuf.Empty); // Добавить характеристику к товару
    rpc RemoveProductCharacteristic (RemoveProductCharacteristicRequest) returns (google.protobuf.Empty); // Удалить характеристику у товара
    rpc GetProductCharacteristics (GetProductCharacteristicsRequest) returns (GetProductCharacteristicsResponse); // Получить список характеристик товара с джоином самих характеристик
    // TODO: Метод обновления значения характеристики у товара

    // FIX: Изменена структура response
    rpc ApplyFilters (ProductsFilter) returns (AvailableFilters); // <<Фасетная фильтрация товаров>> Выводит доступные для дальнейшей фильтрации цену и характеристики (Непосредственно товары метод не фильтрует.)
}


// Создание товара

message CreateRequest {
    string name = 1;                                // Required.
    string category_id = 2;                         // Required.
    string description = 3;                         // Required.
    UnitOfMeasurementENUM unit_of_measurement = 4;  // Required.
    VATENUM vat = 5;                                // Required.
    double old_price = 6;                           // Required.
    double discount_ratio = 7;                      // Required.
}

message CreateResponse {
    string id = 1; // Id of product
}

// Получение товара по его ID

message GetByIDRequest {
    string id = 1;  // Required. Id of product
}

message GetByIDResponse {
    Product data = 1;
}

// Поиск по товарам

message FindResponse {
    repeated Product data = 1;
}

// Обновление данных о товаре

message UpdateRequest { // Реализует логику частичного обновления
    message Data {
        google.protobuf.StringValue name = 1;                   // If passed - set new name
        google.protobuf.StringValue category_id = 2;            // If passed - set new category id
        google.protobuf.StringValue description = 3;            // If passed - set new description
        OptionalUnitOfMeasurementENUM unit_of_measurement = 4;  // If passed - set new unit of measurement
        OptionalVATENUM vat = 5;                                // If passed - set new vat              AND calculate new price!!!
        google.protobuf.DoubleValue old_price = 6;              // If passed - set new old_price        AND calculate new price!!!
        google.protobuf.DoubleValue discount_ratio = 7;         // If passed - set new discount_raio    AND calculate new price!!!
    }

    string id = 1;  // ID of target product
    Data data = 2;  // Data to update
}

// Установка флага видимости товара

message SetVisibleRequest {
    message Data {
        bool is_visible = 1;  // Required. set new is_visible flag for target product
    }

    string id = 1; // ID of target product
    Data data = 2; // Data to update
}

// Полное обновление изображений товара до указанных

message UpdateImagesRequest {  // Реализует аналог PUT запроса в HTTP
    message Data {
        repeated ProductImage images = 1;
    }

    string id = 1; // ID of target product
    Data data = 2; // Data to update
}

// Создание характеристики

message CreateCharacteristicRequest {
    string name = 1;                                // Required.
    CharacteristicValuesTypeEnum values_type = 2;   // Required.
}

message CreateCharacteristicResponse {
    string id = 1;
}

// Поиск по характеристикам

message FindCharacteristicsRequest {
    uint32 limit = 1;                           // Required
    google.protobuf.StringValue search = 2;     // If passed - apply full text search
    repeated string ids = 3;                    // If passed 1 or more id - returns ids in this list. Length depends on limit
}

message FindCharacteristicsResponse {
    repeated Characteristic data = 1;
}

// Обновление данных о характеристике

message UpdateCharacteristicRequest {
    message Data {
        google.protobuf.StringValue name = 1;
    }

    string id = 1;
    Data data = 2;
}

// Удаление характеристики

message DeleteCharacteristicRequest {
    string id = 1;
}

// Добавление характеристики к товару

message AddProductCharacteristicRequest {
    string product_id = 1;
    string characteristic_id = 2;
    oneof value {
        string text_value = 101;
        double numeric_value = 102;
    };
}

// Удалить характеристику товара

message RemoveProductCharacteristicRequest {
    string id = 1;
}

// Получить характеристики товара

message GetProductCharacteristicsRequest {
    string product_id = 1;
}

message GetProductCharacteristicsResponse {
    repeated ProductCharacteristic data = 1;
}


                                    /* Типы данных и структуры */


// Перечисление допустимых единиц измерения для товара
enum UnitOfMeasurementENUM {  
    PIECE = 0;         // Штука
    PAIR = 1;          // Пара
    LITER = 2;         // Литр
    ROLL = 3;          // Рулон
    SHEET = 4;         // Лист
    CENTIMETRE = 5;    // Сантиметр
    METRE = 6;         // Метр
    KILOGRAM = 7;      // Килограмм
    SQUARE_METER = 8;  // Квадратный метр
    CUBIC_METER = 9;   // Кубический метр
}

// Обёртка для случаев когда ENUM опционален
message OptionalUnitOfMeasurementENUM {
    UnitOfMeasurementENUM value = 1;
} 

// Перечисление допустимого налога для товара
enum VATENUM {  
    NDS20 = 0;   // Налог 20%
    NDS10 = 1;   // Налог 10%
    NDS0 = 2;    // Налог 0%
}

// Обёртка для случаев когда ENUM опционален
message OptionalVATENUM {
    VATENUM value = 1;
}

// Изображение товара
message ProductImage {
    string image_url = 1;
    uint32 sort = 2;
}


// Перечисление возможных типов данных значений характеристики
enum CharacteristicValuesTypeEnum {
    TEXT = 0;
    NUMERIC = 1;
}

// Характеристика
message Characteristic {
    string id = 1;
    string name = 2;
    CharacteristicValuesTypeEnum values_type = 3;
}


// Характеристика товара
message ProductCharacteristic {
    string id = 1;
    string characteristic_id = 2;
    oneof value {
        string text_value = 101;
        double numeric_value = 102;
    };
}


// --- Фильтрация ---


message Range {
    double from = 1;
    double to = 2;
}

// Фильтр по характеристикам товара
message CharacteristicsFilter {
    message TextValue {
        string id = 1;
        repeated string values = 2;
    }

    message NumericValue {
        string id = 1;
        Range values = 2;
    }

    repeated TextValue text_values = 1;
    repeated NumericValue numeric_values = 2;
}

// Фильтр для товаров
message ProductsFilter {
    uint32 limit = 1;
    uint64 offset = 2;
    string search = 3;
    Range price = 4;
    google.protobuf.StringValue category_id = 5;
    CharacteristicsFilter characteristics = 6;
    google.protobuf.BoolValue is_visible = 7;
}

// Структура доступных фильтров для товаров (Должна имплементировать ProductsFilter по характеристикам, цене)
message AvailableFilters {
    Range price = 1;
    CharacteristicsFilter characteristics = 2;
}

// Репрезентация товара с всеми полями
message Product {
    string id = 1;
    string name = 2;
    string category_id = 3; 
    string description = 4;
    UnitOfMeasurementENUM unit_of_measurement = 5;
    VATENUM vat = 6;
    double old_price = 7;
    double discount_ratio = 8;
    double price = 9;
    bool is_visible = 10;
    google.protobuf.Timestamp updated_at = 11;
    repeated ProductImage images = 12;
}
